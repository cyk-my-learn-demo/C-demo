
		repo安装一：从清华官网获取的方法————解决
1、安装git 和 curl
	sudo apt-get install git-core curl 

2、下载repo工具
	mkdir ~/bin
	PATH=~/bin:$PATH
	curl https://storage.googleapis.com/git-repo-downloads/repo > ~/bin/repo
	## 如果上述 URL 不可访问，可以用下面的：
	## curl -sSL  'https://gerrit-googlesource.proxy.ustclug.org/git-repo/+/master/repo?format=TEXT' |base64 -d > ~/bin/repo
	chmod a+x ~/bin/repo

3、建立工作目录
	mkdir WORKING_DIRECTORY
	cd WORKING_DIRECTORY

4、初始化仓库
	repo init -u git://mirrors.ustc.edu.cn/aosp/platform/manifest
	## 如果提示无法连接到 gerrit.googlesource.com，可以编辑 ~/bin/repo，把 REPO_URL 一行替换成下面的：
	## REPO_URL = 'https://gerrit-googlesource.proxy.ustclug.org/git-repo'

5、特定版本
	repo init -u git://mirrors.ustc.edu.cn/aosp/platform/manifest -b android-4.0.1_r1

6、同步源码树
	repo sync

在下载repo工具时出现以下错误信息
	bash: /home/cyk/bin/repo: Permission denied
	curl: (23) Failed writing body (0 != 15735)
添加sudo命令，仍然如此。
添加一层777权限目录，为出现上述问题，但是
	curl: (7) Failed to connect to gerrit-googlesource.proxy.ustclug.org port 443: Connection timed out
	修改repo文件中的URL
	直接repo sync



		repo安装二：从网上查找的方法————待定中
1、根目录下创建.bin文件夹

    mkdir ~/.bin

2、配置为临时环境变量(也可配置为永久的)

    PATH=~/.bin:$PATH

3、下载repo

    git clone https://gerrit-googlesource.lug.ustc.edu.cn/git-repo

4、将git-repo中的repo文件复制到 1 创建的.bin目录中

    cd git-repo
    cp repo ~/.bin/

5、修改权限

    chmod a+x ~/.bin/repo

6、创建同步源码的工作目录

    mkdir android_source

7、在工作目录中创建.repo目录

    cd android_source
    mkdir .repo

8、将下载的git-repo拷贝到.repo下,并改名为 repo
9、可以重新初始化了

    repo init -u git://mirrors.ustc.edu.cn/aosp/platform/manifest -b android-4.0.1_r1

10、开始同步

    repo sync


https://blog.csdn.net/liujunpen/article/details/72326635


已经下载aosp源码：
在～/bin目录下
	出现权限错误
	sudo mkdir repo

	sudo chmod 777 repo

	PATH=~/bin/repo:$PATH

repo sync
	Fetching projects:  49% (315/641)  
	error: Exited sync due to fetch errors
	修改repo文件/bin/repo/repo文件中的rpl为：https://gerrit.googlesource.com/git-repo


2 repo常用指令

备注：“*”表示新添加的指令
2.1 repo init (下载repo并克隆manifest)

Usage：

	repo init –u URL [OPTIONS]

Options:

         -u:指定一个URL，其连接到一个maniest仓库

         -m:在manifest仓库中选择一个xml文件

         -b:选择一个maniest仓库中的一个特殊的分支

命令repo init 要完成如下操作：

         完成repo工具的完整下载，执行的repo脚本只是引导程序

         克隆清单库manifest.git (地址来自于-u 参数)

         克隆的清单库位于manifest.git中，克隆到本地.repo/manifests.清单.repo/manifest.xml只是符号链接，它指向.repo/manifests/default.xml

         如果manifests中有多个xml文件，repo init 可以任意选择其中一个，默认选择是default.xml

Example：

repo init  -u git://172.16.1.31/manifest.git
 
repo使用

在目录下面出现了.repo文件夹。

 
repo  init  -u git://172.16.1.31/manifest.git –m android.xml

选择的是android.xml里面的配置，.repo/manifest.xml便指向.repo/manifests/android.xml
2.2 repo sync(下载代码)

Usage:

repo sync [<project>…]

用于参照清单文件.repo/manifest.xml克隆并同步版本库。如果某个项目版本库尚不存在，则执行repo sync 命令相当于执行git clone，如果项目版本库已经存在，则相当于执行下面的两条指令：

         git remote update

相当于对每一个remote源执行了fetch操作

         git rebase origin/branch

针对当前分支的跟踪分支执行rebase操作。

Example:

repo sync

也可以选择克隆其中的一个项目:

repo sync platform/build
2.3 repo start(创建并切换分支)

Usage:

repo start  <newbranchname> [--all | <project>…]

    刚克隆下来的代码是没有分支的,repo start实际是对git checkout –b 命令的封装。为指定的项目或所有项目（若使用—all参数），以清单文件中为设定的分支，创建特性分支。这条指令与git checkout –b 还是有很大的区别的，git checkout –b 是在当前所在的分支的基础上创建特性分支，而repo start是在清单文件设定分支的基础上创建特性分支。

Example：

  repo start  stable  --all

假设清单文件中设定的分支是gingerbread-exdroid-stable，那么执行以上指令就是对所有项目，在gingerbread-exdroid-stable的基础上创建特性分支stable。

  repo start  stable  platform/build platform/bionic

假设清单文件中设定的分支是gingerbread-exdroid-stable，那么执行以上指令就是对platform/build、platform/bionic项目，在gingerbread-exdroid-stable的基础上创建特性分支stable

    
2.4 repo checkout(切换分支)

 Usage：

repo checkout <branchname>  [<project>…]

实际上是对git checkout 命令的封装，但不能带-b参数，所以不能用此命令来创建特性分支。

Example：

repo checkout crane-dev 

repo checkout crane-dev  platform/build  platform/bionic
2.5 repo branches(查看分支)

Usage：

repo branches [<project>…]

Example：

repo branches 

repo branches platform/build platform/bionic
2.6 repo diff(查看工作区文件差异)

 Usage：

repo diff [<project>…]

   实际是对git diff 命令的封装,用于分别显示各个项目工作区下的文件差异。

Example：

repo diff                            ---查看所有项目

repo diff platform/build platform/bionic  ---只查看其中两个项目
2.7 repo stage(把文件添加到index表中)

     实际是对git add --interactive命令的封装、用于挑选各个项目工作区中的改动以加入暂存区。

Usage：

repo stage -i [<project>…]

    -i代表git add --interactive命令中的--interactive，给出个界面供用户选择
2.8 repo prune(删除已经合并分支)

   实际上是对git branch –d命令的封装，该命令用于扫面项目的各个分支，并删除已经合并的分支，用法如下：

repo prune [<project>…]

 
2.9 repo abandon(删除指定分支)

   实际上是对git branch –D 命令的封装，用法如下：

repo abandon <branchname> [<project>…]
2.10 repo status(查看文件状态)

实际上是对git diff-index、git diff-filse命令的封装，同时显示暂存区的状态和本地文件修改的状态

$repo/repo status platform/bionic

repo使用

以上的实例输出显示了platform/bionic项目分支的修改状态

         每个小节的首行显示羡慕名称，以及所在分支的名称

        第一个字母表示暂存区的文件修改状态

         -:没有改变

        A:添加（不在HEAD中，在暂存区中）

        M：修改（在HEAD中，在暂存区中，内容不同）

         D:删除（在HEAD中，不在暂存区）

         R：重命名（不在HEAD中，在暂存区，路径修改）

         C：拷贝（不在HEAD中，在暂存区，从其他文件拷贝）

         T：文件状态改变（在HEAD中，在暂存区，内容相同）

         U：未合并，需要冲突解决

         第二个字母表示工作区文件的更改状态

         -：新/未知（不在暂存区，在工作区）

         m：修改（在暂存区，在工作区，被修改）

         d：删除（在暂存区，不在工作区）

         两个表示状态的字母后面，显示文件名信息。如果有文件重名还会显示改变前后的文件名及文件的相似度
2.11 *repo remote(设置远程仓库)

Usage:

repo remote add <remotename>  <url> [<project>…] 

repo remote rm <remotename>  [<project>…]

Example:

repo remote add org ssh://172.16.1.31/git_repo

这个指令是根据xml文件添加的远程分支，方便于向服务器提交代码，执行之后的build目录下看到新的远程分支org：

repo使用

删除远程仓库：

$repo  remote  rm  org
2.12 *repo push

repo push org

   这是新添加的指令，用于向服务器提交代码，使用方法：

repo push <remotename> [--all |<project>…]

repo会自己查询需要向服务器提交的项目并提示用户。
2.13repo forall

 Usage：

repo forall [<project>…] –c <command>

迭代器，可以在所有指定的项目中执行同一个shell指令

 Options：

         -c:后面所带的参数着是shell指令

         -p:在shell指令输出之前列出项目名称

         -v:列出执行shell指令输出的错误信息

 additional environment variables:

         REPO_PROJECT:指定项目的名称

         REPO_PATH:指定项目在工作区的相对路径

         REPO_REMOTE:指定项目远程仓库的名称

         REPO_LREV:指定项目最后一次提交服务器仓库对应的哈希值

         REPO_RREV:指定项目在克隆时的指定分支，manifest里的revision属性

 另外，如果-c后面所带的shell指令中有上述环境变量，则需要用单引号把shell指令括起来。
3.13.1 添加的环境变量

 
repo forall –c ‘echo $REPO_PROJECT’
 
 
repo使用

  

$repo forall  –c ‘echo $REPO_PATH’
 
  	 

 

 
3.13.2 merge(合并多个分支)

    把所有项目多切换到master分支，执行以下指令将topic分支合并到master分支

 
repo forall –p –c git merge topic
 
  	 
3.13.3 tag(打标签)

在所有项目下打标签

repo forall –c git tag crane-stable-1.6
3.13.4 remote (设置远程仓库)

引用环境变量REPO_PROJECT添加远程仓库：

repo forall –c ‘git remote add korg ssh://xiong@172.16.31/$REPO_PROJECT.git’

删除远程仓库：

repo forall –c git remote add korg
3.13.5 branch(创建特性分支)

repo forall –c git branch crane-dev

repo forall –c git checkout –b crane-dev
3 repo的额外命令集
3.1 repo grep

相当于对git grep 的封装，用于在项目文件中进行内容查找
3.2 repo manifest

显示manifest文件内容

Usage:

repo manifest –o android.xml
3.3 repo version

显示repo的版本号
3.4 repo upload

repo upload相当于git push，但是又有很大的不同。它不是将版本库改动推送到克隆时的远程服务器，而是推送到代码审核服务器(Gerrit软件架设)的特殊引用上，使用SSH协议。代码审核服务器会对推送的提交进行特殊处理，将新的提交显示为一个待审核的修改集，并进入代码审查流程，只有当审核通过后，才会合并到官方正式的版本库中。

因为全志没有代码审核服务器，所以这条指令用不到。

 Usage：

repo upload [--re --cc] {[<project>]… | --replace <project>}

 Options:

         -h, --help:显示帮助信息

         -t:发送本地分支名称到Gerrit代码审核服务器

         --replace:发送此分支的更新补丁集

         --re=REVIEWERS:要求指定的人员进行审核

         --cc=CC:同时发送通知到如下邮件地址
3.5 repo download

主要用于代码审核者下载和评估贡献者提交的修订

Usage

repo download {project change [patchset]}…
3.6 repo selfupdate

    用于repo自身的更新














